{"version":3,"sources":["atoms.tsx","components/CreateCat.tsx","components/CreateToDo.tsx","components/ToDo.tsx","components/ToDoList.tsx","App.tsx","index.tsx","theme.ts"],"names":["categoryState","atom","key","default","newCat","JSON","parse","localStorage","getItem","categoryObj","TO_DO","DOING","DONE","toDoState","toDoSelector","selector","get","toDos","category","setItem","stringify","filter","toDo","CreateCat","setCat","useSetRecoilState","useForm","register","handleSubmit","setValue","onSubmit","createCat","prev","required","type","placeholder","CreateToDo","setToDos","useRecoilValue","oldToDos","text","id","Date","now","ToDo","cat","Object","keys","map","item","onClick","newCategory","targetIndex","findIndex","newToDo","newToDos","splice","ToDoList","useRecoilState","setCategory","value","onInput","event","currentTarget","GlobalStyle","createGlobalStyle","App","ReactDOM","render","StrictMode","theme","bgColor","textClolr","accentColor","cardBgColor","document","getElementById"],"mappings":"gMAYaA,EAAgBC,YAAK,CAChCC,IAAK,WACLC,QAAS,UAGLC,EAASC,KAAKC,MAAMC,aAAaC,QAAQ,cAElCC,EAAcR,YAAa,CACtCC,IAAK,UACLC,QAAQ,aACNO,MAAO,QACPC,MAAO,QACPC,KAAM,QACHR,KAIMS,EAAYZ,YAAc,CACrCC,IAAK,OACLC,QAASE,KAAKC,MAAMC,aAAaC,QAAQ,WAAc,KAG5CM,EAAeC,YAAS,CACnCb,IAAK,eACLc,IAAK,YAAc,IAAXA,EAAU,EAAVA,IACAC,EAAQD,EAAIH,GACZK,EAAWF,EAAIhB,GAGrB,OAFAO,aAAaY,QAAQ,QAASd,KAAKe,UAAUH,IAEtCA,EAAMI,QAAO,SAACC,GAAD,OAAUA,EAAKJ,WAAaA,Q,sBCErCK,MAnCf,WACE,IAAMC,EAASC,YAAkBhB,GACjC,EAA6CiB,cAArCC,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,aAAcC,EAAhC,EAAgCA,SAgBhC,OACE,qCACE,uEACA,uBAAMC,SAAUF,GAjBH,SAAC,GAA0B,IAAxBG,EAAuB,EAAvBA,UAClBP,GAAO,SAACQ,GAKN,OAJAzB,aAAaY,QACX,YACAd,KAAKe,UAAL,2BAAoBY,GAApB,kBAA2BD,EAAYA,MAElC,2BACFC,GADL,kBAEGD,EAAYA,OAGjBF,EAAS,YAAa,OAMpB,UACE,iDACMF,EAAS,YAAa,CACxBM,SAAU,2CAFd,IAIEC,KAAK,OACLC,YAAY,2EAEd,gD,OCFOC,MA3Bf,WACE,IAAMC,EAAWZ,YAAkBZ,GAC7BK,EAAWoB,YAAetC,GAChC,EAA6C0B,cAArCC,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,aAAcC,EAAhC,EAAgCA,SAUhC,OACE,uBAAMC,SAAUF,GATD,SAAC,GAAqB,IAAnBN,EAAkB,EAAlBA,KAClBe,GAAS,SAACE,GAAD,OACP,CAAEC,KAAMlB,EAAMJ,WAAUuB,GAAIC,KAAKC,QAD1B,mBAEJJ,OAELV,EAAS,OAAQ,OAIjB,UACE,iDACMF,EAAS,OAAQ,CACnBM,SAAU,sDAFd,IAIEC,KAAK,OACLC,YAAY,uCAEd,6CCYSS,MAvCf,YAA8C,IAA9BJ,EAA6B,EAA7BA,KAAMtB,EAAuB,EAAvBA,SAAUuB,EAAa,EAAbA,GACxBJ,EAAWZ,YAAkBZ,GAC7BgC,EAAMP,YAAe7B,GAqB3B,OACE,+BACE,+BAAO+B,IACNM,OAAOC,KAAKF,GAAKG,KAChB,SAACC,GAAD,OACE/B,IAAa2B,EAAII,IACf,wBAAmBC,QAAS,kBAzBrBC,EAyBmCN,EAAII,QAxBtDZ,GAAS,SAACE,GACR,IAAMa,EAAcb,EAASc,WAAU,SAAC/B,GAAD,OAAUA,EAAKmB,KAAOA,KACvDa,EAAU,CAAEd,OAAMC,KAAIvB,SAAUiC,GAChCI,EAAQ,YAAOhB,GAErB,OADAgB,EAASC,OAAOJ,EAAa,EAAGE,GACzBC,KANK,IAACJ,GAyBP,SACGN,EAAII,IADMA,MAKnB,wBAAQC,QApBK,WACfb,GAAS,SAACE,GACR,IAAMa,EAAcb,EAASc,WAAU,SAAC/B,GAAD,OAAUA,EAAKmB,KAAOA,KACvDc,EAAQ,YAAOhB,GAErB,OADAgB,EAASC,OAAOJ,EAAa,GACtBG,MAeP,wBCESE,I,EAAAA,EAhCf,WACE,IAAMxC,EAAQqB,YAAexB,GAC7B,EAAgC4C,YAAe1D,GAA/C,mBAAOkB,EAAP,KAAiByC,EAAjB,KACMd,EAAMP,YAAe7B,GAM3B,OACE,mCACE,gCACE,wCACA,uBACA,cAAC,EAAD,IACA,uBACA,wBAAQmD,MAAO1C,EAAU2C,QAXf,SAACC,GACfH,EAAYG,EAAMC,cAAcH,QAU5B,SACGd,OAAOC,KAAKF,GAAKG,KAAI,SAACC,GAAD,OACpB,wBAAmBW,MAAOf,EAAII,GAA9B,SACGJ,EAAII,IADMA,QAKjB,cAAC,EAAD,IACChC,EAAM+B,KAAI,SAAC1B,GAAD,OACT,cAAC,EAAD,eAAwBA,GAAbA,EAAKmB,aC7BpBuB,EAAcC,YAAH,gCAaFC,MATf,WACE,OACE,qCACE,cAACF,EAAD,IACA,cAAC,EAAD,QCJNG,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAeC,MCRkB,CACrCC,QAAS,QACTC,UAAW,QACXC,YAAa,OACbC,YAAa,QDIT,SACE,cAAC,EAAD,UAINC,SAASC,eAAe,W","file":"static/js/main.c5c9f282.chunk.js","sourcesContent":["import { atom, selector } from \"recoil\";\n\nexport interface IToDo {\n  id: number;\n  text: string;\n  category: string;\n}\n\ninterface catObj {\n  [key: string]: string;\n}\n\nexport const categoryState = atom({\n  key: \"category\",\n  default: \"TO_DO\",\n});\n\nconst newCat = JSON.parse(localStorage.getItem(\"createCat\")!);\n\nexport const categoryObj = atom<catObj>({\n  key: \"testCat\",\n  default: {\n    TO_DO: \"TO_DO\",\n    DOING: \"DOING\",\n    DONE: \"DONE\",\n    ...newCat,\n  },\n});\n\nexport const toDoState = atom<IToDo[]>({\n  key: \"toDo\",\n  default: JSON.parse(localStorage.getItem(\"toDos\")!) || [],\n});\n\nexport const toDoSelector = selector({\n  key: \"toDoSelector\",\n  get: ({ get }) => {\n    const toDos = get(toDoState);\n    const category = get(categoryState);\n    localStorage.setItem(\"toDos\", JSON.stringify(toDos));\n\n    return toDos.filter((toDo) => toDo.category === category);\n  },\n});\n","import { useForm } from \"react-hook-form\";\nimport { useSetRecoilState } from \"recoil\";\nimport { categoryObj } from \"../atoms\";\n\ninterface IForm {\n  createCat: string;\n}\n\nfunction CreateCat() {\n  const setCat = useSetRecoilState(categoryObj);\n  const { register, handleSubmit, setValue } = useForm();\n\n  const onSubmit = ({ createCat }: IForm) => {\n    setCat((prev) => {\n      localStorage.setItem(\n        \"createCat\",\n        JSON.stringify({ ...prev, [createCat]: createCat })\n      );\n      return {\n        ...prev,\n        [createCat]: createCat,\n      };\n    });\n    setValue(\"createCat\", \"\");\n  };\n\n  return (\n    <>\n      <h3>카테고리 추가</h3>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <input\n          {...register(\"createCat\", {\n            required: \"입력해 주세요\",\n          })}\n          type=\"text\"\n          placeholder=\"추가 카테고리 이름을 입력\"\n        />\n        <button>Add</button>\n      </form>\n    </>\n  );\n}\n\nexport default CreateCat;\n","import { useForm } from \"react-hook-form\";\nimport { useSetRecoilState, useRecoilValue } from \"recoil\";\nimport { categoryState, toDoState } from \"../atoms\";\n\ninterface IForm {\n  toDo: string;\n}\n\nfunction CreateToDo() {\n  const setToDos = useSetRecoilState(toDoState);\n  const category = useRecoilValue(categoryState);\n  const { register, handleSubmit, setValue } = useForm();\n\n  const onSubmit = ({ toDo }: IForm) => {\n    setToDos((oldToDos) => [\n      { text: toDo, category, id: Date.now() },\n      ...oldToDos,\n    ]);\n    setValue(\"toDo\", \"\");\n  };\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <input\n        {...register(\"toDo\", {\n          required: \"toDo를 입력해 주세요\",\n        })}\n        type=\"text\"\n        placeholder=\"오늘 할 일은?\"\n      />\n      <button>Add</button>\n    </form>\n  );\n}\n\nexport default CreateToDo;\n","import { categoryObj, IToDo, toDoState } from \"../atoms\";\nimport { useRecoilValue, useSetRecoilState } from \"recoil\";\n\nfunction ToDo({ text, category, id }: IToDo) {\n  const setToDos = useSetRecoilState(toDoState);\n  const cat = useRecoilValue(categoryObj);\n\n  const onClick = (newCategory: IToDo[\"category\"]) => {\n    setToDos((oldToDos) => {\n      const targetIndex = oldToDos.findIndex((toDo) => toDo.id === id);\n      const newToDo = { text, id, category: newCategory };\n      const newToDos = [...oldToDos];\n      newToDos.splice(targetIndex, 1, newToDo);\n      return newToDos;\n    });\n  };\n\n  const onDelete = () => {\n    setToDos((oldToDos) => {\n      const targetIndex = oldToDos.findIndex((toDo) => toDo.id === id);\n      const newToDos = [...oldToDos];\n      newToDos.splice(targetIndex, 1);\n      return newToDos;\n    });\n  };\n\n  return (\n    <li>\n      <span>{text}</span>\n      {Object.keys(cat).map(\n        (item) =>\n          category !== cat[item] && (\n            <button key={item} onClick={() => onClick(cat[item])}>\n              {cat[item]}\n            </button>\n          )\n      )}\n      <button onClick={onDelete}>delete</button>\n    </li>\n  );\n}\n\nexport default ToDo;\n","import React from \"react\";\nimport { useRecoilValue, useRecoilState } from \"recoil\";\nimport { categoryObj, categoryState, toDoSelector } from \"../atoms\";\nimport CreateCat from \"./CreateCat\";\nimport CreateToDo from \"./CreateToDo\";\nimport ToDo from \"./ToDo\";\n\nfunction ToDoList() {\n  const toDos = useRecoilValue(toDoSelector);\n  const [category, setCategory] = useRecoilState(categoryState);\n  const cat = useRecoilValue(categoryObj);\n\n  const onInput = (event: React.FormEvent<HTMLSelectElement>) => {\n    setCategory(event.currentTarget.value as any);\n  };\n\n  return (\n    <>\n      <div>\n        <h1>to Dos</h1>\n        <hr />\n        <CreateCat />\n        <hr />\n        <select value={category} onInput={onInput}>\n          {Object.keys(cat).map((item) => (\n            <option key={item} value={cat[item]}>\n              {cat[item]}\n            </option>\n          ))}\n        </select>\n        <CreateToDo />\n        {toDos.map((toDo) => (\n          <ToDo key={toDo.id} {...toDo} />\n        ))}\n      </div>\n    </>\n  );\n}\n\nexport default ToDoList;\n","import { createGlobalStyle } from \"styled-components\";\nimport ToDoList from \"./components/ToDoList\";\n\nconst GlobalStyle = createGlobalStyle`\n  \n`;\n\nfunction App() {\n  return (\n    <>\n      <GlobalStyle />\n      <ToDoList />\n    </>\n  );\n}\n\nexport default App;\n","import { ThemeProvider } from \"styled-components\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { darkTheme } from \"./theme\";\nimport { RecoilRoot } from \"recoil\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <ThemeProvider theme={darkTheme}>\n        <App />\n      </ThemeProvider>\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","import { DefaultTheme } from \"styled-components\";\n\nexport const darkTheme: DefaultTheme = {\n  bgColor: \"white\",\n  textClolr: \"black\",\n  accentColor: \"blue\",\n  cardBgColor: \"gray\",\n};\n"],"sourceRoot":""}